name: Collaboration Check
on:
  pull_request:
    types: [opened, synchronize, reopened]
jobs:
  collab:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: read
      issues: read
    steps:
      - name: Ensure at least two distinct contributors on this PR
        uses: actions/github-script@v7
        with:
          script: |
            const pr = context.payload.pull_request;
            const {owner, repo} = context.repo;
            const number = pr.number;

            // Helpers
            const isHuman = (u) => u && !/bot/i.test(u);

            // Collect commit authors on THIS PR
            const commits = await github.paginate(github.rest.pulls.listCommits, {owner, repo, pull_number: number});
            const commitAuthors = new Set(
              commits
                .map(c => c.author?.login || c.commit?.author?.name || "")
                .filter(isHuman)
            );

            // Collect reviewers on THIS PR
            const reviews = await github.paginate(github.rest.pulls.listReviews, {owner, repo, pull_number: number});
            const reviewAuthors = new Set(reviews.map(r => r.user?.login).filter(isHuman));

            // Collect PR comments (issue comments)
            const comments = await github.paginate(github.rest.issues.listComments, {owner, repo, issue_number: number});
            const commentAuthors = new Set(comments.map(c => c.user?.login).filter(isHuman));

            // Union of all human participants on this PR
            const participants = new Set([
              ...commitAuthors, ...reviewAuthors, ...commentAuthors
            ]);

            // Remove the PR author (must have at least one other human)
            participants.delete(pr.user?.login);

            core.info(`Commit authors: ${[...commitAuthors].join(", ") || "(none)"}`);
            core.info(`Reviewers: ${[...reviewAuthors].join(", ") || "(none)"}`);
            core.info(`Commenters: ${[...commentAuthors].join(", ") || "(none)"}`);
            core.info(`Unique participants (excluding PR author): ${[...participants].join(", ") || "(none)"}`);

            if (participants.size < 1) {
              core.setFailed("Ping-pong not detected: need contributions from at least two distinct humans (author + partner via commits, review, or comments).");
            }
